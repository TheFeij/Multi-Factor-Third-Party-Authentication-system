networks:
  mfa_network:
    driver: bridge

services:
  authentication-server:
    build:
      context: ./authentication-server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      mongo:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - mfa_network
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"

  authorization-server:
    build:
      context: ./authorization-server
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      authentication-server:
        condition: service_started
      mongo:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - mfa_network
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"

  mongo:
    build:
      context: .
      dockerfile: Mongodb-Dockerfile
    container_name: mongodb
    ports:
      - "27017:27017"
    restart: always
    environment:
        MONGO_INITDB_ROOT_USERNAME: admin
        MONGO_INITDB_ROOT_PASSWORD: password
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'127.0.0.1:27017'}]}) }" | mongosh --port 27017 -u admin -p password --authenticationDatabase admin
      interval: 5s
      timeout: 15s
      start_period: 15s
      retries: 10
    volumes:
      - mongo_data:/data/db
    networks:
      - mfa_network

  mongo-init-replica:
    image: mongo:8.0
    depends_on:
      - mongo
    entrypoint: >
      bash -c "sleep 5 && mongosh --host mongo:27017 -u admin -p password --authenticationDatabase admin --eval 'rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"mongo:27017\"}]})'"
    networks:
      - mfa_network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    mem_limit: 256m
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data
    networks:
      - mfa_network

volumes:
  mongo_data:
  redis_data:
